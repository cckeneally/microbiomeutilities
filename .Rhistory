guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(comparisons = comps,
label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
}
return(plt)
}
#' @title Test pairwise
#' @description Creates a combination of variables
#' for use with ggpubr::stat_compare_means.
#' @param x phyloseq
#' @param group group variable
#'
make_test <- function(df,
group,
violin.opacity,
dot.opacity,
index,
box.opacity,
group.colors,
label.format,
...){
plt <- NULL
if (length(unique(df[, group]) == 2)) {
plt <- ggplot(df,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
} else (length(unique(df[, group]) > 2)) {
comps <- make_pairs(df[, group])
plt <- ggplot(df,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(comparisons = comps,
label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
}
return(plt)
}
formatR::tidy_eval()
#' @title Test pairwise
#' @description Creates a combination of variables
#' for use with ggpubr::stat_compare_means.
#' @param x phyloseq
#' @param group group variable
#'
make_test <- function(dframe,
group,
violin.opacity,
dot.opacity,
index,
box.opacity,
group.colors,
label.format,
...){
plt <- NULL
if (length(unique(dframe[, group]) == 2)) {
plt <- ggplot(dframe,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
} else (length(unique(dframe[, group]) > 2)) {
comps <- make_pairs(dframe[, group])
plt <- ggplot(dframe,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(comparisons = comps,
label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
}
return(plt)
}
#' @title Test pairwise
#' @description Creates a combination of variables
#' for use with ggpubr::stat_compare_means.
#' @param x phyloseq
#' @param group group variable
#'
make_test <- function(dataframe,
group,
violin.opacity,
dot.opacity,
index,
box.opacity,
group.colors,
label.format,
...){
plt <- NULL
dframe <- dataframe
if (length(unique(dframe[, group]) == 2)) {
plt <- ggplot(dframe,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
} else (length(unique(dframe[, group]) > 2)) {
comps <- make_pairs(dframe[, group])
plt <- ggplot(dframe,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(comparisons = comps,
label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
}
return(plt)
}
#' @title Test pairwise
#' @description Creates a combination of variables
#' for use with ggpubr::stat_compare_means.
#' @param x phyloseq
#' @param group group variable
#'
make_test <- function(dataframe=dframe,
group,
violin.opacity,
dot.opacity,
index,
box.opacity,
group.colors,
label.format,
...){
plt <- NULL
dframe <- dataframe
if (length(unique(dframe[, group]) == 2)) {
plt <- ggplot(dframe,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
} else (length(unique(dframe[, group]) > 2)) {
comps <- make_pairs(dframe[, group])
plt <- ggplot(dframe,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors) +
stat_compare_means(comparisons = comps,
label=label.format,
tip.length = 0.05,
method = "wilcox.test", ...)
}
return(plt)
}
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c("brown3", "steelblue", "grey50")
#' p.m <- plot_diversity_stats(p0, group = "DiseaseState",
#'                             index = "diversity_shannon",
#'                             group.order = c("H", "CRC", "nonCRC"),
#'                             group.colors = mycols)
#' print(p.m)
#' @keywords visualization analysis
#' @export
plot_diversity_stats <- function(x, index,
group = NULL,
group.colors = c("brown3", "steelblue"),
dot.opacity = 0.25,
box.opacity = 0.25,
violin.opacity = 0.5,
group.order = NULL,
stats = TRUE,
label.format="p.format",
...) {
if (stats==TRUE){
p <- plot_diversity_with_stats(x, index,
group = group,
group.colors = group.colors,
dot.opacity = dot.opacity,
box.opacity = box.opacity,
violin.opacity = violin.opacity,
group.order = group.order,
label.format=label.format)
} else if (stats==FALSE)
p <- plot_diversity_without_stats(x, index=index,
group = group,
group.colors = group.colors,
dot.opacity = dot.opacity,
box.opacity = box.opacity,
violin.opacity = violin.opacity,
group.order = group.order,
label.format=label.format)
}
plot_diversity_with_stats <- function(x, index,
group = NULL,
group.colors = c("brown3", "steelblue"),
dot.opacity = 0.25,
box.opacity = 0.25,
violin.opacity = 0.5,
group.order = NULL, ...) {
# x <- ps.c
adiv <- alpha(x, index = index)
df_met <- cbind(adiv, meta(x))
if (!is.null(group.order)) {
df_met[, group] <- factor(df_met[, group],
levels = group.order
)
}
plt <- ggplot(data = df_met,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors)
if (length(unique(df_met[, group])) == 2) {
plt <- plt + stat_compare_means(
label = "p.format",
tip.length = 0.05,
method = "wilcox.test", ...
)
} else if (length(unique(df_met[, group])) > 2) {
comps <- make_pairs(df_met[, group])
plt <- plt + stat_compare_means(
comparisons = comps,
label = "p.format",
tip.length = 0.05,
method = "wilcox.test", ...
)
}
plt + theme_biome_utils() + rotate_x_text()
}
##################################################################################
plot_diversity_without_stats <- function(x, index,
group = NULL,
group.colors = c("brown3", "steelblue"),
dot.opacity = 0.25,
box.opacity = 0.25,
violin.opacity = 0.5,
group.order = NULL, ...) {
# x <- ps.c
adiv <- alpha(x, index = index)
df_met <- cbind(adiv, meta(x))
if (!is.null(group.order)) {
df_met[, group] <- factor(df_met[, group],
levels = group.order
)
}
plt <- ggplot(data = df_met,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors)
plt  <- plt + theme_biome_utils() + rotate_x_text()
return(plt)
}
data("zackular2014")
p0 <- zackular2014
mycols <- c("brown3", "steelblue","grey50")
p.m <- plot_diversity_stats(p0, group = "DiseaseState",
index = "diversity_shannon",
group.order = c("H", "CRC", "nonCRC"),
group.colors = mycols,
label.format="p.format")
p.m + ylab("Shannon Diversity") + xlab("")
#' @title Diversity plot with stats
#' @param x \code{\link{phyloseq-class}} object
#' @param index diversity index. Calculated using microbiome::alpha
#' @param group Grouping variable to compare
#' @param group.colors Colors for plotting groups
#' @param dot.opacity for ggplot alpha to determine opacity for points
#' @param box.opacity for ggplot alpha to determine opacity for box
#' @param violin.opacity for ggplot alpha to determine opacity for violin
#' @param group.order Default is NULL. a list specifing order of x-axis.
#' @param stats Logical TRUE or FALSE. Calls ggpubr::stat_compare_means.
#' E.g. c("H","CRC","nonCRC")
#' @param ... params for ggpubr::stat_compare_means
#' @importFrom ggpubr stat_compare_means rotate_x_text
#' @importFrom gghalves geom_half_violin
#' @examples
#' library(microbiomeutilities)
#' library(ggpubr)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c("brown3", "steelblue", "grey50")
#' p.m <- plot_diversity_stats(p0, group = "DiseaseState",
#'                             index = "diversity_shannon",
#'                             group.order = c("H", "CRC", "nonCRC"),
#'                             group.colors = mycols)
#' print(p.m)
#' @keywords visualization analysis
#' @export
plot_diversity_stats <- function(x, index,
group = NULL,
group.colors = c("brown3", "steelblue"),
dot.opacity = 0.25,
box.opacity = 0.25,
violin.opacity = 0.5,
group.order = NULL,
stats = TRUE,
label.format="p.format",
...) {
if (stats==TRUE){
p <- plot_diversity_with_stats(x, index,
group = group,
group.colors = group.colors,
dot.opacity = dot.opacity,
box.opacity = box.opacity,
violin.opacity = violin.opacity,
group.order = group.order,
label.format=label.format)
} else if (stats==FALSE)
p <- plot_diversity_without_stats(x, index=index,
group = group,
group.colors = group.colors,
dot.opacity = dot.opacity,
box.opacity = box.opacity,
violin.opacity = violin.opacity,
group.order = group.order,
label.format=label.format)
}
plot_diversity_with_stats <- function(x, index,
group = NULL,
group.colors = c("brown3", "steelblue"),
dot.opacity = 0.25,
box.opacity = 0.25,
violin.opacity = 0.5,
group.order = NULL, ...) {
# x <- ps.c
adiv <- alpha(x, index = index)
df_met <- cbind(adiv, meta(x))
if (!is.null(group.order)) {
df_met[, group] <- factor(df_met[, group],
levels = group.order
)
}
plt <- ggplot(data = df_met,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors)
if (length(unique(df_met[, group])) == 2) {
plt <- plt + stat_compare_means(
label = "p.format",
tip.length = 0.05,
method = "wilcox.test", ...
)
} else if (length(unique(df_met[, group])) > 2) {
comps <- make_pairs(df_met[, group])
plt <- plt + stat_compare_means(
comparisons = comps,
label = "p.format",
tip.length = 0.05,
method = "wilcox.test", ...
)
}
plt + theme_biome_utils() + rotate_x_text()
}
##################################################################################
plot_diversity_without_stats <- function(x, index,
group = NULL,
group.colors = c("brown3", "steelblue"),
dot.opacity = 0.25,
box.opacity = 0.25,
violin.opacity = 0.5,
group.order = NULL, ...) {
# x <- ps.c
adiv <- alpha(x, index = index)
df_met <- cbind(adiv, meta(x))
if (!is.null(group.order)) {
df_met[, group] <- factor(df_met[, group],
levels = group.order
)
}
plt <- ggplot(data = df_met,
aes_string(group, index,fill = group)) +
geom_half_violin(position = position_nudge(x = 0.15, y = 0),
alpha = violin.opacity, side = "r") +
geom_point(aes_string(y = index, color = group),
position = position_jitter(width = 0.15),
size = 1, alpha = dot.opacity) +
geom_boxplot(width = 0.2, outlier.shape = NA,
alpha = box.opacity) +
guides(fill = FALSE, color = FALSE) +
scale_fill_manual(values = group.colors) +
scale_colour_manual(values = group.colors)
plt  <- plt + theme_biome_utils() + rotate_x_text()
return(plt)
}
p.m <- plot_diversity_stats(p0, group = "DiseaseState",
index = "diversity_shannon",
group.order = c("H", "CRC", "nonCRC"),
group.colors = mycols,
label.format="p.format",
stats = FALSE)
library(gghalves)
library(microbiomeutilities)
data("zackular2014")
p0 <- zackular2014
mycols <- c("brown3", "steelblue","grey50")
p.m <- plot_diversity_stats(p0, group = "DiseaseState",
index = "diversity_shannon",
group.order = c("H", "CRC", "nonCRC"),
group.colors = mycols,
label.format="p.format",
stats = FALSE)
p.m + ylab("Shannon Diversity") + xlab("")
library(gghalves)
library(microbiomeutilities)
data("zackular2014")
p0 <- zackular2014
mycols <- c("brown3", "steelblue","grey50")
p.m <- plot_diversity_stats(p0, group = "DiseaseState",
index = "diversity_shannon",
group.order = c("H", "CRC", "nonCRC"),
group.colors = mycols,
label.format="p.format",
stats = TRUE)
p.m + ylab("Shannon Diversity") + xlab("")
roxygen2::roxygenize()
devtools::check()
pkgdown::build_site()
