M[inds, seq_len(inds2)] <- fill_na_taxa
Mx <- as(tax_table(M), "matrix") %>% as.data.frame()
table(Mx$Family)
ps0 <- emp_human
tax_table(ps0)[,colnames(tax_table(ps0))] <- gsub("[a-z]__$", NA,
tax_table(ps0)[,colnames(tax_table(ps0))])
head(tax_table(ps0))
x <- emp_human
if (!level %in% rank_names(x)) {
stop("The level argument should be one of the options
given by rank_names(x): ",
paste(rank_names(x), collapse = " / "))
}
# check if f__[Acidaminobactera etc present to convert f__ to empty
tax_table(x)[,colnames(tax_table(x))] <- gsub("[a-z]__", NA,
tax_table(x)[,colnames(tax_table(x))])
# Check if the object is already at the given level
inds <- all(tax_table(x)[, level] == tax_table(x)[, ncol(tax_table(x))])
inds <- which(inds)
check1 <- length(inds) > 0
check2 <- !any(duplicated(tax_table(x)[, level]))
if (check1 && check2) {
return(x)
}
# Sanity checks for a phyloseq object. Required with some methods.
if (!taxa_are_rows(x)) {
x@otu_table <- otu_table(t(otu_table(x)), taxa_are_rows = TRUE)
taxa_are_rows(x) <- TRUE
}
fill_na_taxa <- "Unknown"
if (verbose) {print("Remove taxonomic information below the target level")}
M <- as.matrix(tax_table(x))
inds2 <- match(level, colnames(M))
M <- M[, seq_len(inds2)]
M[is.na(M)] <- fill_na_taxa
# Ensure that the filled entries are unique
inds <- which(M[, level] == fill_na_taxa)
M[inds, seq_len(inds2)] <- fill_na_taxa
Mx <- as(tax_table(M), "matrix") %>% as.data.frame()
table(Mx$Family)
if (!level %in% rank_names(x)) {
stop("The level argument should be one of the options
given by rank_names(x): ",
paste(rank_names(x), collapse = " / "))
}
# check if f__[Acidaminobactera etc present to convert f__ to empty
tax_table(x)[,colnames(tax_table(x))] <- gsub("[a-z]__", NA,
tax_table(x)[,colnames(tax_table(x))])
# Check if the object is already at the given level
inds <- all(tax_table(x)[, level] == tax_table(x)[, ncol(tax_table(x))])
inds <- which(inds)
check1 <- length(inds) > 0
check2 <- !any(duplicated(tax_table(x)[, level]))
if (check1 && check2) {
return(x)
}
# Sanity checks for a phyloseq object. Required with some methods.
if (!taxa_are_rows(x)) {
x@otu_table <- otu_table(t(otu_table(x)), taxa_are_rows = TRUE)
taxa_are_rows(x) <- TRUE
}
fill_na_taxa <- "Unknown"
if (verbose) {print("Remove taxonomic information below the target level")}
M <- as.matrix(tax_table(x))
inds2 <- match(level, colnames(M))
M <- M[, seq_len(inds2)]
M[is.na(M)] <- fill_na_taxa
if (!level %in% rank_names(x)) {
stop("The level argument should be one of the options
given by rank_names(x): ",
paste(rank_names(x), collapse = " / "))
}
# check if f__[Acidaminobactera etc present to convert f__ to empty
tax_table(x)[,colnames(tax_table(x))] <- gsub("[a-z]__$", NA,
tax_table(x)[,colnames(tax_table(x))])
# Check if the object is already at the given level
inds <- all(tax_table(x)[, level] == tax_table(x)[, ncol(tax_table(x))])
inds <- which(inds)
check1 <- length(inds) > 0
check2 <- !any(duplicated(tax_table(x)[, level]))
if (check1 && check2) {
return(x)
}
# Sanity checks for a phyloseq object. Required with some methods.
if (!taxa_are_rows(x)) {
x@otu_table <- otu_table(t(otu_table(x)), taxa_are_rows = TRUE)
taxa_are_rows(x) <- TRUE
}
fill_na_taxa <- "Unknown"
if (verbose) {print("Remove taxonomic information below the target level")}
M <- as.matrix(tax_table(x))
inds2 <- match(level, colnames(M))
M <- M[, seq_len(inds2)]
M[is.na(M)] <- fill_na_taxa
# Ensure that the filled entries are unique
inds <- which(M[, level] == fill_na_taxa)
M[inds, seq_len(inds2)] <- fill_na_taxa
unique <- apply(M, 1, function (x) {paste(x, collapse = "_")})
unique[1:10]
x <- emp_human
level= "Genus"
verbose = FALSE
if (!level %in% rank_names(x)) {
stop("The level argument should be one of the options
given by rank_names(x): ",
paste(rank_names(x), collapse = " / "))
}
# Check if the object is already at the given level
inds <- all(tax_table(x)[, level] == tax_table(x)[, ncol(tax_table(x))])
inds <- which(inds)
check1 <- length(inds) > 0
check2 <- !any(duplicated(tax_table(x)[, level]))
if (check1 && check2) {
return(x)
}
# Sanity checks for a phyloseq object. Required with some methods.
if (!taxa_are_rows(x)) {
x@otu_table <- otu_table(t(otu_table(x)), taxa_are_rows = TRUE)
taxa_are_rows(x) <- TRUE
}
fill_na_taxa <- "Unknown"
if (verbose) {print("Remove taxonomic information below the target level")}
M <- as.matrix(tax_table(x))
inds2 <- match(level, colnames(M))
M <- M[, seq_len(inds2)]
M[is.na(M)] <- fill_na_taxa
# Ensure that the filled entries are unique
inds <- which(M[, level] == fill_na_taxa)
M[inds, seq_len(inds2)] <- fill_na_taxa
unique <- apply(M, 1, function (x) {paste(x, collapse = "_")})
M <- cbind(M, unique = unique)
x@tax_table <- tax_table(M)
if (!nrow(tax_table(x)) == nrow(otu_table(x))) {
stop("Taxonomic table and OTU table dimensions do not match.")
}
if (verbose) {print("Mark the potentially ambiguous taxa")}
tt <- tax_table(x)
if (verbose) {print("-- split")}
otus <- split(rownames(tt), as.character(tt[, "unique"]))
ab <- matrix(NA, nrow=length(otus), ncol=nsamples(x))
rownames(ab) <- names(otus)
colnames(ab) <- sample_names(x)
if (verbose) {print("-- sum")}
d <- abundances(x)
ab <- t(vapply(otus, function (taxa) {
as.numeric(colSums(matrix(d[taxa, ], ncol=nsamples(x)), na.rm = TRUE))
}, FUN.VALUE = unname(as.numeric(d[1,]))))
colnames(ab) <- colnames(d)
rownames(ab) <- names(otus)
ab[1:3]
ab[1:3,1:3]
if (verbose) {print("Create phyloseq object")}
OTU <- otu_table(ab, taxa_are_rows=TRUE)
x2 <- phyloseq(OTU)
if (verbose) {print("Remove ambiguous levels")}
## First remove NA entries from the target level
inds3 <- match(level, colnames(tt@.Data))
inds4 <- match("unique", colnames(tt@.Data))
taxtab <- tt@.Data[which(!is.na(tt@.Data[, level])),
c(seq_len(inds3), inds4)]
if (verbose) {print("-- unique")}
tax <- unique(taxtab)
if (verbose) {print("-- Rename the lowest level")}
tax <- as.data.frame(tax)
if (verbose) {print("-- rownames")}
rownames(tax) <- tax[, "unique"]
head(rownames(tax))[1:10]
head(rownames(tax))
rownames(tax)[1:10]
rownames(tax) <- gsub("___g__", "", rownames(tax))
rownames(tax)[1:10]
x <- emp_human
level= "Genus"
verbose = FALSE
if (!level %in% rank_names(x)) {
stop("The level argument should be one of the options
given by rank_names(x): ",
paste(rank_names(x), collapse = " / "))
}
# check if f__[Acidaminobactera etc present to convert f__ to empty
tax_table(x)[,colnames(tax_table(x))] <- gsub("[a-z]__$", NA,
tax_table(x)[,colnames(tax_table(x))])
# Check if the object is already at the given level
inds <- all(tax_table(x)[, level] == tax_table(x)[, ncol(tax_table(x))])
inds <- which(inds)
check1 <- length(inds) > 0
check2 <- !any(duplicated(tax_table(x)[, level]))
if (check1 && check2) {
return(x)
}
# Sanity checks for a phyloseq object. Required with some methods.
if (!taxa_are_rows(x)) {
x@otu_table <- otu_table(t(otu_table(x)), taxa_are_rows = TRUE)
taxa_are_rows(x) <- TRUE
}
fill_na_taxa <- "Unknown"
if (verbose) {print("Remove taxonomic information below the target level")}
M <- as.matrix(tax_table(x))
inds2 <- match(level, colnames(M))
M <- M[, seq_len(inds2)]
M[is.na(M)] <- fill_na_taxa
# Ensure that the filled entries are unique
inds <- which(M[, level] == fill_na_taxa)
M[inds, seq_len(inds2)] <- fill_na_taxa
unique <- apply(M, 1, function (x) {paste(x, collapse = "_")})
M <- cbind(M, unique = unique)
x@tax_table <- tax_table(M)
if (!nrow(tax_table(x)) == nrow(otu_table(x))) {
stop("Taxonomic table and OTU table dimensions do not match.")
}
if (verbose) {print("Mark the potentially ambiguous taxa")}
tt <- tax_table(x)
if (verbose) {print("-- split")}
otus <- split(rownames(tt), as.character(tt[, "unique"]))
ab <- matrix(NA, nrow=length(otus), ncol=nsamples(x))
rownames(ab) <- names(otus)
colnames(ab) <- sample_names(x)
if (verbose) {print("-- sum")}
d <- abundances(x)
ab <- t(vapply(otus, function (taxa) {
as.numeric(colSums(matrix(d[taxa, ], ncol=nsamples(x)), na.rm = TRUE))
}, FUN.VALUE = unname(as.numeric(d[1,]))))
colnames(ab) <- colnames(d)
rownames(ab) <- names(otus)
if (verbose) {print("Create phyloseq object")}
OTU <- otu_table(ab, taxa_are_rows=TRUE)
x2 <- phyloseq(OTU)
if (verbose) {print("Remove ambiguous levels")}
## First remove NA entries from the target level
inds3 <- match(level, colnames(tt@.Data))
inds4 <- match("unique", colnames(tt@.Data))
taxtab <- tt@.Data[which(!is.na(tt@.Data[, level])),
c(seq_len(inds3), inds4)]
if (verbose) {print("-- unique")}
tax <- unique(taxtab)
if (verbose) {print("-- Rename the lowest level")}
tax <- as.data.frame(tax)
if (verbose) {print("-- rownames")}
rownames(tax) <- tax[, "unique"]
rownames(tax)[1:10]
rownames(tax)
rownames(tax)[1:10]
tax2 <- tax
rownames(tax2) <- gsub('(.*)_[a-z]\\w+', '\\1', rownames(tax2))
tt <- tax_table(x)
if (verbose) {print("-- split")}
otus <- split(rownames(tt), as.character(tt[, "unique"]))
ab <- matrix(NA, nrow=length(otus), ncol=nsamples(x))
rownames(ab) <- names(otus)
colnames(ab) <- sample_names(x)
if (verbose) {print("-- sum")}
d <- abundances(x)
ab <- t(vapply(otus, function (taxa) {
as.numeric(colSums(matrix(d[taxa, ], ncol=nsamples(x)), na.rm = TRUE))
}, FUN.VALUE = unname(as.numeric(d[1,]))))
colnames(ab) <- colnames(d)
rownames(ab) <- names(otus)
if (verbose) {print("Create phyloseq object")}
OTU <- otu_table(ab, taxa_are_rows=TRUE)
x2 <- phyloseq(OTU)
if (verbose) {print("Remove ambiguous levels")}
## First remove NA entries from the target level
inds3 <- match(level, colnames(tt@.Data))
inds4 <- match("unique", colnames(tt@.Data))
taxtab <- tt@.Data[which(!is.na(tt@.Data[, level])),
c(seq_len(inds3), inds4)]
if (verbose) {print("-- unique")}
tax <- unique(taxtab)
if (verbose) {print("-- Rename the lowest level")}
tax <- as.data.frame(tax)
if (verbose) {print("-- rownames")}
rownames(tax) <- tax[, "unique"]
#tax2 <- tax
#rownames(tax2) <- gsub('(.*)_[a-z]\\w+', '\\1', rownames(tax2))
if (verbose) {print("-- taxa")}
tax <- as.matrix(tax)
if (verbose) {print("Convert to taxonomy table")}
TAX <- tax_table(tax)
if (verbose) {print("Combine OTU and Taxon matrix into Phyloseq object")}
x2 <- merge_phyloseq(x2, TAX)
# Then keep short names for those taxa where short names are unique
tt <- tax_table(x2)
uni <- names(which(table(as.vector(tt[, level])) == 1))
inds <- which(tt[, level] %in% uni)
taxa <- tt[inds, level]
taxa[1:10]
taxa
tt[inds, "unique"] <- taxa
rownames(tt)[inds] <- taxa
ab <- abundances(x2)
rnams <- rownames(ab)
rnams[inds] <- taxa
rownames(ab) <- rnams
rnams
uni
ab2 <- ab
rownames(ab) <- gsub('(.*)_[a-z]__\\w+', '\\2', rownames(ab))
rownames(ab)
rownames(ab2)
ab <-ab2
rownames(ab2) <- sub("_[^_[a-z]__]+$", "", rownames(ab2))
rownames(ab2)
rownames(ab2) <- sub("[^_[a-z]__]+$", "", rownames(ab2))
rownames(ab2)[270:275]
rownames(ab2) <- sub("[^_[a-z]__]$", "", rownames(ab2))
rownames(ab2)[270:275]
rownames(ab2) <- sub("[^_[a-z]__]\\w+", "", rownames(ab2))
rownames(ab2)[270:275]
head(tax_table(x))
dup <- duplicated(tt[,level])
dup
x <- emp_human
if (!level %in% rank_names(x)) {
stop("The level argument should be one of the options
given by rank_names(x): ",
paste(rank_names(x), collapse = " / "))
}
# check if f__[Acidaminobactera etc present to convert f__ to empty
tax_table(x)[,colnames(tax_table(x))] <- gsub("[a-z]__$", NA,
tax_table(x)[,colnames(tax_table(x))])
# Check if the object is already at the given level
inds <- all(tax_table(x)[, level] == tax_table(x)[, ncol(tax_table(x))])
inds <- which(inds)
check1 <- length(inds) > 0
check2 <- !any(duplicated(tax_table(x)[, level]))
if (check1 && check2) {
return(x)
}
# Sanity checks for a phyloseq object. Required with some methods.
if (!taxa_are_rows(x)) {
x@otu_table <- otu_table(t(otu_table(x)), taxa_are_rows = TRUE)
taxa_are_rows(x) <- TRUE
}
fill_na_taxa <- "Unknown"
if (verbose) {print("Remove taxonomic information below the target level")}
M <- as.matrix(tax_table(x))
inds2 <- match(level, colnames(M))
M <- M[, seq_len(inds2)]
M[is.na(M)] <- fill_na_taxa
# Ensure that the filled entries are unique
inds <- which(M[, level] == fill_na_taxa)
M[inds, seq_len(inds2)] <- fill_na_taxa
unique <- apply(M, 1, function (x) {paste(x, collapse = "_")})
M <- cbind(M, unique = unique)
x@tax_table <- tax_table(M)
if (!nrow(tax_table(x)) == nrow(otu_table(x))) {
stop("Taxonomic table and OTU table dimensions do not match.")
}
if (verbose) {print("Mark the potentially ambiguous taxa")}
# Some genera for instance belong to multiple Phyla and perhaps these
# are different
# genera. For instance there is genus Clostridium in Tenericutes
# and Firmicutes.
# (GlobalPatterns data set) and even more families.
tt <- tax_table(x)
if (verbose) {print("-- split")}
otus <- split(rownames(tt), as.character(tt[, "unique"]))
ab <- matrix(NA, nrow=length(otus), ncol=nsamples(x))
rownames(ab) <- names(otus)
colnames(ab) <- sample_names(x)
if (verbose) {print("-- sum")}
d <- abundances(x)
ab <- t(vapply(otus, function (taxa) {
as.numeric(colSums(matrix(d[taxa, ], ncol=nsamples(x)), na.rm = TRUE))
}, FUN.VALUE = unname(as.numeric(d[1,]))))
colnames(ab) <- colnames(d)
rownames(ab) <- names(otus)
if (verbose) {print("Create phyloseq object")}
OTU <- otu_table(ab, taxa_are_rows=TRUE)
x2 <- phyloseq(OTU)
if (verbose) {print("Remove ambiguous levels")}
## First remove NA entries from the target level
inds3 <- match(level, colnames(tt@.Data))
inds4 <- match("unique", colnames(tt@.Data))
taxtab <- tt@.Data[which(!is.na(tt@.Data[, level])),
c(seq_len(inds3), inds4)]
if (verbose) {print("-- unique")}
tax <- unique(taxtab)
if (verbose) {print("-- Rename the lowest level")}
tax <- as.data.frame(tax)
if (verbose) {print("-- rownames")}
rownames(tax) <- tax[, "unique"]
#tax2 <- tax
#rownames(tax2) <- gsub('(.*)_[a-z]\\w+', '\\1', rownames(tax2))
if (verbose) {print("-- taxa")}
tax <- as.matrix(tax)
if (verbose) {print("Convert to taxonomy table")}
TAX <- tax_table(tax)
if (verbose) {print("Combine OTU and Taxon matrix into Phyloseq object")}
x2 <- merge_phyloseq(x2, TAX)
# Then keep short names for those taxa where short names are unique
tt <- tax_table(x2)
dup <- duplicated(tt[,level])
if(any(dup)){
td <- apply(tt[,level],1L,paste,collapse = "___")
td_non_dup <- td[!dup]
m <- match(td, td_non_dup)
}
heaD(m)
head(m)
td_non_dup
m
td
head(tt )
dup <- duplicated(tax[,level])
if(any(dup)){
td <- apply(tax[,level],1L,paste,collapse = "___")
td_non_dup <- td[!dup]
m <- match(td, td_non_dup)
}
tax[,level]
dup <- duplicated(tt[,level])
if(any(dup)){
td <- apply(tt[,level],1L,paste,collapse = "___")
td_non_dup <- td[!dup]
m <- match(td, td_non_dup)
}
ans <-tt[!dup,]
dim(ans)
dim(tt)
table(dup)
if(any(dup)){
ans <- ans[m]
}
dim(ans)
head(ans)
if(make_unique && anyDuplicated(ans)){
dup <- which(ans %in% ans[which(duplicated(ans))])
ans[dup] <- make.unique(ans[dup], sep = "_")
}
if(anyDuplicated(ans)){
dup <- which(ans %in% ans[which(duplicated(ans))])
ans[dup] <- make.unique(ans[dup], sep = "_")
}
if(any(dup)){
dup <- which(ans %in% ans[which(duplicated(ans))])
ans[dup] <- make.unique(ans[dup], sep = "_")
}
if(any(dup)){
dup <- which(ans %in% ans[which(duplicated(ans))])
ans[dup,] <- make.unique(ans[dup,], sep = "_")
}
ans <-as.matrix(tt[!dup,])
if(any(dup)){
ans <- as.matrix(ans[m])
}
if(any(dup)){
dup <- which(ans %in% ans[which(duplicated(ans))])
ans[dup,] <- make.unique(ans[dup,], sep = "_")
}
class(ans)
ans <- as(tt[!dup,], "matrix")
ans <- as.matrix(tt[!dup,])
dup <- duplicated(tt[,level])
if(any(dup)){
td <- apply(tt[,level],1L,paste,collapse = "___")
td_non_dup <- td[!dup]
m <- match(td, td_non_dup)
}
ans <- as.matrix(tt[!dup,])
class(ans)
dup <- duplicated(tt[,level])
if(any(dup)){
td <- apply(tt[,level],1L,paste,collapse = "___")
td_non_dup <- td[!dup]
m <- match(td, td_non_dup)
}
ans <- as(tt[!dup,],"matrix")
class(ans)
if(any(dup)){
ans <- as.(ans[m])
}
if(any(dup)){
ans <- ans[m]
}
if(any(dup)){
dup <- which(ans %in% ans[which(duplicated(ans))])
ans[dup,] <- make.unique(ans[dup,], sep = "_")
}
dup
dup <- duplicated(tt[,level])
if(any(dup)){
td <- apply(tt[,level],1L,paste,collapse = "___")
td_non_dup <- td[!dup]
m <- match(td, td_non_dup)
}
ans <- as(tt[!dup,],"matrix")
if(any(dup)){
ans <- ans[m]
}
if(any(dup)){
dup <- which(ans %in% ans[which(duplicated(ans))])
ans[dup,] <- make.unique(ans[dup,], sep = "_")
}
dup <- which(ans %in% dup)
ans[dup,] <- make.unique(ans[dup,], sep = "_")
if(any(dup)){
dup <- which(ans %in% dup)
ans[dup,] <- make.unique(ans[dup,], sep = "_")
}
ans
uni <- names(which(table(as.vector(tt[, level])) == 1))
inds <- which(tt[, level] %in% uni)
inds
taxa <- tt[inds, level]
taxa
tt <- tax_table(x2)
uni <- names(which(table(as.vector(tt[, level])) == 1))
inds <- which(tt[, level] %in% uni)
inds
taxa <- tt[inds, level]
taxa
