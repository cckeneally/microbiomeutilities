df <- phy_to_ldf(p0.mr, NULL)
df$level_var <- df[,level]
# variable goes to Sam_rep column
taxa_mean <- df %>%
group_by(unique, Sam_rep) %>%
summarise(value=mean(Abundance))
taxa_tern <- taxa_mean %>%
group_by(Sam_rep, unique) %>%
#mutate(index=row_number()) %>%
pivot_wider(names_from=Sam_rep,values_from=value) %>%
left_join(taxa_df, by=c("level_var"=unique))
return(taxa_tern)
}
prep_ternary <- function(x,
abund.thres=0.0001,
prev.thres=0.1,
group=NULL,
level= "lowest"){
p0.agg <- Sam_rep <- Abundance <- value <- taxa_df <- OTUID <- taxa_mean <- NULL
p0.mr.cr <- level_var <- smas <- taxa_tern <- NULL
if(level=="lowest"){
p <- prep_tern_otu(x,
abund.thres= abund.thres,
prev.thres= prev.thres,
group=group)
return(p)
} else {
p0.mr <- transform(x, "compositional")
tax_table(p0.mr)[,colnames(tax_table(p0.mr))] <-
gsub(tax_table(p0.mr)[,colnames(tax_table(p0.mr))],
pattern="[a-z]__",replacement="")
p0.agg <- aggregate_taxa(p0.mr, level=level)
p0.mr.cr <- core(p0.agg,detection = abund.thres,
prevalence = prev.thres)
#DT::datatable(tax_table(p0.mr.cr))
p0.mr <- merge_samples(p0.mr.cr, group = group)
# extract taxonomy
taxa_df <- tax_table(p0.mr) %>%
as("matrix") %>%
as.data.frame()
taxa_df$OTUID <- rownames(taxa_df)
taxa_df$level_var <- taxa_df[,level_var]
df <- phy_to_ldf(p0.mr, NULL)
df$level_var <- df[,unique]
# variable goes to Sam_rep column
taxa_mean <- df %>%
group_by(unique, Sam_rep) %>%
summarise(value=mean(Abundance))
taxa_tern <- taxa_mean %>%
group_by(Sam_rep, level_var) %>%
#mutate(index=row_number()) %>%
pivot_wider(names_from=Sam_rep,values_from=value) %>%
left_join(taxa_df, by=c("level_var"=level))
return(taxa_tern)
}
}
prep_ternary(p0, group="DiseaseState", abund.thres=0.0001, level= "Genus", prev.thres=0.25)
prep_ternary <- function(x,
abund.thres=0.0001,
prev.thres=0.1,
group=NULL,
level= "lowest"){
p0.agg <- Sam_rep <- Abundance <- value <- taxa_df <- OTUID <- taxa_mean <- NULL
p0.mr.cr <- level_var <- smas <- taxa_tern <- NULL
if(level=="lowest"){
p <- prep_tern_otu(x,
abund.thres= abund.thres,
prev.thres= prev.thres,
group=group)
return(p)
} else {
p0.mr <- transform(x, "compositional")
tax_table(p0.mr)[,colnames(tax_table(p0.mr))] <-
gsub(tax_table(p0.mr)[,colnames(tax_table(p0.mr))],
pattern="[a-z]__",replacement="")
p0.agg <- aggregate_taxa(p0.mr, level=level)
p0.mr.cr <- core(p0.agg,detection = abund.thres,
prevalence = prev.thres)
#DT::datatable(tax_table(p0.mr.cr))
p0.mr <- merge_samples(p0.mr.cr, group = group)
# extract taxonomy
taxa_df <- tax_table(p0.mr) %>%
as("matrix") %>%
as.data.frame()
taxa_df$OTUID <- rownames(taxa_df)
taxa_df$unique <- taxa_df[,unique]
df <- phy_to_ldf(p0.mr, NULL)
#df$level_var <- df[,unique]
# variable goes to Sam_rep column
taxa_mean <- df %>%
group_by(unique, Sam_rep) %>%
summarise(value=mean(Abundance))
taxa_tern <- taxa_mean %>%
group_by(Sam_rep, unique) %>%
#mutate(index=row_number()) %>%
pivot_wider(names_from=Sam_rep,values_from=value) %>%
left_join(taxa_df, by="unique")
return(taxa_tern)
}
}
prep_ternary(p0, group="DiseaseState", abund.thres=0.0001, level= "Genus", prev.thres=0.25)
x <- p0
p0.mr <- transform(x, "compositional")
tax_table(p0.mr)[,colnames(tax_table(p0.mr))] <-
gsub(tax_table(p0.mr)[,colnames(tax_table(p0.mr))],
pattern="[a-z]__",replacement="")
p0.agg <- aggregate_taxa(p0.mr, level=level)
p0.mr.cr <- core(p0.agg,detection = abund.thres,
prevalence = prev.thres)
group="DiseaseState"; abund.thres=0.0001; level= "Genus"; prev.thres=0.25
p0.agg <- aggregate_taxa(p0.mr, level=level)
p0.mr.cr <- core(p0.agg,detection = abund.thres,
prevalence = prev.thres)
p0.mr <- merge_samples(p0.mr.cr, group = group)
# extract taxonomy
taxa_df <- tax_table(p0.mr) %>%
as("matrix") %>%
as.data.frame()
taxa_df$OTUID <- rownames(taxa_df)
head(taxa_df)
df <- phy_to_ldf(p0.mr, NULL)
#df$level_var <- df[,unique]
# variable goes to Sam_rep column
taxa_mean <- df %>%
group_by(unique, Sam_rep) %>%
summarise(value=mean(Abundance))
taxa_tern <- taxa_mean %>%
group_by(Sam_rep, unique) %>%
#mutate(index=row_number()) %>%
pivot_wider(names_from=Sam_rep,values_from=value) %>%
left_join(taxa_df, by="unique")
head(taxa_tern)
prep_ternary <- function(x,
abund.thres=0.0001,
prev.thres=0.1,
group=NULL,
level= "lowest"){
p0.agg <- Sam_rep <- Abundance <- value <- taxa_df <- OTUID <- taxa_mean <- NULL
p0.mr.cr <- level_var <- smas <- taxa_tern <- NULL
if(level=="lowest"){
p <- prep_tern_otu(x,
abund.thres= abund.thres,
prev.thres= prev.thres,
group=group)
return(p)
} else {
x <- p0
p0.mr <- transform(x, "compositional")
tax_table(p0.mr)[,colnames(tax_table(p0.mr))] <-
gsub(tax_table(p0.mr)[,colnames(tax_table(p0.mr))],
pattern="[a-z]__",replacement="")
p0.agg <- aggregate_taxa(p0.mr, level=level)
p0.mr.cr <- core(p0.agg,detection = abund.thres,
prevalence = prev.thres)
#DT::datatable(tax_table(p0.mr.cr))
p0.mr <- merge_samples(p0.mr.cr, group = group)
# extract taxonomy
taxa_df <- tax_table(p0.mr) %>%
as("matrix") %>%
as.data.frame()
taxa_df$OTUID <- rownames(taxa_df)
#taxa_df$unique <- taxa_df[,unique]
df <- phy_to_ldf(p0.mr, NULL)
#df$level_var <- df[,unique]
# variable goes to Sam_rep column
taxa_mean <- df %>%
group_by(unique, Sam_rep) %>%
summarise(value=mean(Abundance))
taxa_tern <- taxa_mean %>%
group_by(Sam_rep, unique) %>%
#mutate(index=row_number()) %>%
pivot_wider(names_from=Sam_rep,values_from=value) %>%
left_join(taxa_df, by="unique")
return(taxa_tern)
}
}
prep_ternary <- function(x,
abund.thres=0.0001,
prev.thres=0.1,
group=NULL,
level= "lowest"){
p0.agg <- Sam_rep <- Abundance <- value <- taxa_df <- OTUID <- taxa_mean <- NULL
p0.mr.cr <- level_var <- smas <- taxa_tern <- NULL
if(level=="lowest"){
p <- prep_tern_otu(x,
abund.thres= abund.thres,
prev.thres= prev.thres,
group=group)
return(p)
} else {
#x <- p0
p0.mr <- transform(x, "compositional")
tax_table(p0.mr)[,colnames(tax_table(p0.mr))] <-
gsub(tax_table(p0.mr)[,colnames(tax_table(p0.mr))],
pattern="[a-z]__",replacement="")
p0.agg <- aggregate_taxa(p0.mr, level=level)
p0.mr.cr <- core(p0.agg,detection = abund.thres,
prevalence = prev.thres)
#DT::datatable(tax_table(p0.mr.cr))
p0.mr <- merge_samples(p0.mr.cr, group = group)
# extract taxonomy
taxa_df <- tax_table(p0.mr) %>%
as("matrix") %>%
as.data.frame()
taxa_df$OTUID <- rownames(taxa_df)
#taxa_df$unique <- taxa_df[,unique]
df <- phy_to_ldf(p0.mr, NULL)
#df$level_var <- df[,unique]
# variable goes to Sam_rep column
taxa_mean <- df %>%
group_by(unique, Sam_rep) %>%
summarise(value=mean(Abundance))
taxa_tern <- taxa_mean %>%
group_by(Sam_rep, unique) %>%
#mutate(index=row_number()) %>%
pivot_wider(names_from=Sam_rep,values_from=value) %>%
left_join(taxa_df, by="unique")
return(taxa_tern)
}
}
prep_ternary(p0, group="DiseaseState", abund.thres=0.0001, level= "Genus", prev.thres=0.25)
roxygen2::roxygenize()
roxygen2::roxygenize()
library(microbiome)
library(microbiomeutilities)
library(dplyr)
data("zackular2014")
p0 <- zackular2014
p <- prep_tern_otu(p0, group="DiseaseState",
abund.thres=0.000001, level= "Genus", prev.thres=0.01)
p <- prep_tern(p0, group="DiseaseState",
abund.thres=0.000001, level= "Genus", prev.thres=0.01)
p <- prep_ternary(p0, group="DiseaseState",
abund.thres=0.000001, level= "Genus", prev.thres=0.01)
p
library(microbiome)
library(microbiomeutilities)
library(dplyr)
data("zackular2014")
p0 <- zackular2014
tern_df <- prep_ternary(p0, group="DiseaseState",
abund.thres=0.000001, level= "Genus", prev.thres=0.01)
head(tern_df)
tern_df <- prep_ternary(p0, group="DiseaseState",
abund.thres=0.000001, level= "Genus", prev.thres=0.01)
head(tern_df)
head(tern_df)
library(ggtern)
p <- ggtern(data=taxa_tern, aes(x=CRC, y=H, z=snonCRC)) +
#theme_rgbw() +
geom_point(aes(color= "Phylum"),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(values="Paired") +
theme_biome_utils()
ggtern(data=tern_df, aes(x=CRC, y=H, z=snonCRC)) +
geom_point(aes(color= "Phylum"),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(values="Paired") +
theme_biome_utils()
ggtern(data=tern_df, aes(x=CRC, y=H, z=snonCRC)) +
geom_point(aes(color= "Phylum"),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(palette = "Paired") +
theme_biome_utils()
ggtern(data=tern_df, aes(x=CRC, y=H, z=nonCRC)) +
geom_point(aes(color= "Phylum"),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(palette = "Paired") +
theme_biome_utils()
ggtern(data=tern_df, aes(x=CRC, y=H, z=nonCRC)) +
geom_point(aes(color= Phylum),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(palette = "Paired") +
theme_biome_utils()
tern_df[,"Phylum"][which(tern_df[,"Phylum"] == "")] <- "Other"
tern_df$Phylum
tern_df <- tern_df %>%
replace("","Other")
ggtern(data=tern_df, aes(x=CRC, y=H, z=nonCRC)) +
geom_point(aes(color= Phylum),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(palette = "Paired") +
theme_biome_utils()
tern_df$Phylum <- gsub("","Other",tern_df$Phylum)
ggtern(data=tern_df, aes(x=CRC, y=H, z=nonCRC)) +
geom_point(aes(color= Phylum),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(palette = "Paired") +
theme_biome_utils()
tern_df <- prep_ternary(p0, group="DiseaseState",
abund.thres=0.000001, level= "Genus", prev.thres=0.01)
head(tern_df)
tern_df$Phylum <- gsub(" ","Other",tern_df$Phylum)
ggtern(data=tern_df, aes(x=CRC, y=H, z=nonCRC)) +
geom_point(aes(color= Phylum),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(palette = "Paired") +
theme_biome_utils()
taxa_df[,Phylum]
tern_df[,Phylum]
tern_df[,"Phylum"]
tern_df[,"Phylum"][which(tern_df[,"Phylum"] == "")]
which(tern_df[,"Phylum"] == "")
str(tern_df)
tern_df$Phylum[tern_df$Phylum==""] <- "Other"
ggtern(data=tern_df, aes(x=CRC, y=H, z=nonCRC)) +
geom_point(aes(color= Phylum),
alpha=0.25,
show.legend=T,
size=3) +
#scale_size(range=c(0, 6)) +
geom_mask() +
scale_colour_brewer(palette = "Paired") +
theme_biome_utils()
detach("ggtern")
detach(ggtern)
detach("package:ggtern", unload=TRUE)
roxygen2::roxygenize()
library(microbiome)
library(microbiomeutilities)
library(dplyr)
data("zackular2014")
p0 <- zackular2014
tern_df <- prep_ternary(p0, group="DiseaseState",
abund.thres=0.000001, level= "Genus", prev.thres=0.01)
head(tern_df)
library(gghalves)
library(microbiomeutilities)
data("zackular2014")
p0 <- zackular2014
mycols <- c("brown3", "steelblue","grey50")
p.m <- plot_diversity_stats(p0, group = "DiseaseState",
index = "diversity_shannon",
group.order = c("H", "CRC", "nonCRC"),
group.colors = mycols,
label.format="p.format",
stats = TRUE)
p.m + ylab("Shannon Diversity") + xlab("")
devtools::check()
roxygen2::roxygenize()
devtools::check()
pkgdown::build_site()
roxygen2::roxygenize()
devtools::check()
library(microbiomeutilities)
pkgdown::build_site()
?abundances
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
top_four
library(microbiome)
library(microbiomeutilities)
data("zackular2014")
p0 <- zackular2014
p0.f <- aggregate_taxa(p0, "Genus")
top_four <- top_taxa(p0.f, 4)
top_four
#Finding the samples dominated by user provided taxa in a phyloseq object
find_samples_taxa <- function(x, taxa="g__Bacteroides",relative=TRUE) {
if(relative==TRUE){
abund <- abundances(x,transform ="compositional")
}
abund <- abundances(x)
y <- apply(abund, 2, function(x) {
order(x, decreasing=TRUE)[1] == grep(taxa,
rownames(abund),
perl=TRUE)
})
return(abund[,y])
}
find_samples_taxa(p0.f, top_four[1])
cornyDom <- find_samples_taxa(p0.f, top_four[1])
cornyDom.x <- colnames(cornyDom)
cornyDom.x
cornyDom <- find_samples_taxa(p0.f, top_four[2])
cornyDom.x <- colnames(cornyDom)
cornyDom.x
taxa_names(p0.f)
rownames(abund)
rownames(abundances(p0.f))
#' @param relative Logical. If using relative abundance Default=TRUE
#' @return A data frames/ grouped tibble
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' get_group_abundances(p0, level = "Phylum", group="DiseaseState")
#' @export
#' @keywords utilities
#'
find_samples_taxa <- function(x, taxa="g__Bacteroides",relative=TRUE) {
if(relative==TRUE){
abund <- abundances(x,transform ="compositional")
}
abund <- abundances(x)
y <- apply(abund, 2, function(x) {
order(x, decreasing=TRUE)[1] == grep(taxa,
rownames(abund),
perl=TRUE)
})
return(colnames(abund[,y]))
}
cornyDom <- find_samples_taxa(p0.f, top_four[2])
cornyDom
class(cornyDom)
bac_dom <- find_samples_taxa(p0.f, taxa="g__Bacteroides")
p0.f
ps.sub <- prune_samples(sample_names(p0.f) %in% bac_dom)
ps.sub <- prune_samples(sample_names(p0.f) %in% bac_dom,p0.f)
ps.sub
bac_dom
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' p0.f <- aggregate_taxa(p0, "Genus")
#' bac_dom <- find_samples_taxa(p0.f, taxa="g__Bacteroides")
#' # get samples dominated by g__Bacteroides
#' ps.sub <- prune_samples(sample_names(p0.f) %in% bac_dom, p0.f)
#' @export
#' @keywords utilities
#'
find_samples_taxa <- function(x, taxa=NULL,relative=TRUE) {
if(is.null(taxa)){
stop("Please specific name of taxa")
}
if(relative==TRUE){
abund <- abundances(x,transform ="compositional")
}
abund <- abundances(x)
y <- apply(abund, 2, function(x) {
order(x, decreasing=TRUE)[1] == grep(taxa,
rownames(abund),
perl=TRUE)
})
return(colnames(abund[,y]))
}
find_samples_taxa(p0.f, taxa="cc")
find_samples_taxa(p0.f, taxa="g__Bacteroides")
!taxa %in% taxa_names(p0.f)
taxa="g__Bacteroides"
if(taxa %in% taxa_names(p0.f)){
print("Yes")
}
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' p0.f <- aggregate_taxa(p0, "Genus")
#' bac_dom <- find_samples_taxa(p0.f, taxa="g__Bacteroides")
#' # get samples dominated by g__Bacteroides
#' ps.sub <- prune_samples(sample_names(p0.f) %in% bac_dom, p0.f)
#' @export
#' @keywords utilities
#'
find_samples_taxa <- function(x, taxa=NULL,relative=TRUE) {
if(is.null(taxa)){
stop("Please specific name of taxa")
}
if(relative==TRUE){
abund <- abundances(x,transform ="compositional")
}
abund <- abundances(x)
if(taxa %in% taxa_names(p0.f)){
y <- apply(abund, 2, function(x) {
order(x, decreasing=TRUE)[1] == grep(taxa,
rownames(abund),
perl=TRUE)
})
return(colnames(abund[,y]))
} else {
stop(paste0(taxa, " does not match any rownames of otu_table!!!"))
}
}
bac_dom <- find_samples_taxa(p0.f, taxa="g__Bacteroides")
bac_dom <- find_samples_taxa(p0.f, taxa="gferoides")
styler:::style_active_pkg()
roxygen2::roxygenize()
devtools::check()
pkgdown::build_site()
