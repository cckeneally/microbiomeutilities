#} else {
#
#  p <- plot(venn(x.l),
#            fills = mycols)
return(list_core)
}
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
plot(venn(for_venn), fills = mycols)
grps
list_core
#' @param prev.thres = 0.1 check \code{\link{microbiome}} package aggregate_rare function.
#' @param ... params for eulerr::venn or eulerr::euler
#' @importFrom eulerr venn euler
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
#' p0.rel <- microbiome::transform(p0, "compositional")
#' for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
shared_core <- function(x,
group,
group.colors,
abund.thres = 0.0001,
prev.thres = 0.75){
grps <- group_var <- core_m <- list_core <- NULL
require(eulerr)
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
# make list of core taxa
list_core <- c()
for (i in grps){
xc <- subset_samples(x, group_var == i)
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i]] <- core_m
#print(list_core)
}
#list_corex <- rbind(list_core)
#list_corex <- setNames(list_core,grps)
#print(list_core)
#if(is.null(group.colors)){
#  p <- plot(venn(x.l))
#  return(p)
#} else {
#
#  p <- plot(venn(x.l),
#            fills = mycols)
return(list_core)
}
plot(venn(for_venn), fills = mycols)
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
grps <- unique(sample_data(x)$group_var)
grps
list_core <- c()
for (i in grps){
xc <- subset_samples(x, group_var == i)
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i]] <- core_m
#print(list_core)
}
list_core
}
#' @param prev.thres = 0.1 check \code{\link{microbiome}} package aggregate_rare function.
#' @param ... params for eulerr::venn or eulerr::euler
#' @importFrom eulerr venn euler
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
#' p0.rel <- microbiome::transform(p0, "compositional")
#' for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
shared_core <- function(x,
group,
group.colors,
abund.thres = 0.0001,
prev.thres = 0.75){
grps <- group_var <- core_m <- list_core <- NULL
require(eulerr)
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
# make list of core taxa
list_core <- c()
for (i in grps){
xc <- subset_samples(x, group_var == i)
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i]] <- core_m
#print(list_core)
}
list_core
return(list_core)
}
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
for_venn
#' @param prev.thres = 0.1 check \code{\link{microbiome}} package aggregate_rare function.
#' @param ... params for eulerr::venn or eulerr::euler
#' @importFrom eulerr venn euler
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
#' p0.rel <- microbiome::transform(p0, "compositional")
#' for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
shared_core <- function(x,
group,
group.colors,
abund.thres = 0.0001,
prev.thres = 0.75){
grps <- group_var <- core_m <- list_core <- NULL
require(eulerr)
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
# make list of core taxa
list_core <- list()
for (i in grps){
xc <- subset_samples(x, group_var == i)
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i]] <- core_m
#print(list_core)
}
#list_core
return(list_core)
}
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
for_venn
#' @param prev.thres = 0.1 check \code{\link{microbiome}} package aggregate_rare function.
#' @param ... params for eulerr::venn or eulerr::euler
#' @importFrom eulerr venn euler
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
#' p0.rel <- microbiome::transform(p0, "compositional")
#' for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
shared_core <- function(x,
group,
group.colors,
abund.thres = 0.0001,
prev.thres = 0.75){
grps <- group_var <- core_m <- list_core <- NULL
require(eulerr)
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
# make list of core taxa
list_core <- list()
for (i in 1:length(grps)){
xc <- subset_samples(x, group_var == grps[i])
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i]] <- core_m
#print(list_core)
}
list_core <- setNames(list_core, grps)
#list_core
return(list_core)
}
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
1:length(grps)
grps[1]
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
list_core <- list()
for (i in 1:length(grps)){
xc <- subset_samples(x, group_var == grps[i])
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i]] <- core_m
#print(list_core)
}
list_core
list_core <- setNames(list_core, grps)
list_core
#' @param prev.thres = 0.1 check \code{\link{microbiome}} package aggregate_rare function.
#' @param ... params for eulerr::venn or eulerr::euler
#' @importFrom eulerr venn euler
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
#' p0.rel <- microbiome::transform(p0, "compositional")
#' for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
shared_core <- function(x,
group,
group.colors,
abund.thres = 0.0001,
prev.thres = 0.75){
grps <- group_var <- core_m <- list_core <- NULL
require(eulerr)
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
# make list of core taxa
list_core <- list()
for (i in 1:length(grps)){
xc <- subset_samples(x, group_var == grps[i])
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i]] <- core_m
#print(list_core)
}
list_core <- setNames(list_core, grps)
#list_core
return(list_core)
}
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
for_venn
#' @param prev.thres = 0.1 check \code{\link{microbiome}} package aggregate_rare function.
#' @param ... params for eulerr::venn or eulerr::euler
#' @importFrom eulerr venn euler
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
#' p0.rel <- microbiome::transform(p0, "compositional")
#' for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
shared_core <- function(x,
group,
group.colors,
abund.thres = 0.0001,
prev.thres = 0.75){
grps <- group_var <- core_m <- list_core <- NULL
require(eulerr)
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
# make list of core taxa
list_core <- list()
for (i in 1:length(grps)){
xc <- subset_samples(x, group_var == grps[i])
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i+1]] <- core_m
#print(list_core)
}
list_core <- list_core[-1]
list_core <- setNames(list_core, grps)
#list_core
return(list_core)
}
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
for_venn
plot(venn(for_venn),
fills = mycols)
for_venn
library(microbiomeutilities)
data("zackular2014")
p0 <- zackular2014
mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
p0.rel <- microbiome::transform(p0, "compositional")
#' @param prev.thres = 0.1 check \code{\link{microbiome}} package aggregate_rare function.
#' @param ... params for eulerr::venn or eulerr::euler
#' @importFrom eulerr venn euler
#' @examples
#' library(microbiomeutilities)
#' data("zackular2014")
#' p0 <- zackular2014
#' mycols <- c(CRC="brown3", H="steelblue", nonCRC="grey50")
#' p0.rel <- microbiome::transform(p0, "compositional")
#' for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
shared_core <- function(x,
group,
group.colors,
abund.thres = 0.0001,
prev.thres = 0.75){
grps <- group_var <- core_m <- list_core <- NULL
require(eulerr)
#grps <- unique(meta(x)[,group])
sample_data(x)$group_var <- as.character(meta(x)[,group])
grps <- unique(sample_data(x)$group_var)
# make list of core taxa
list_core <- list()
for (i in 1:length(grps)){
xc <- subset_samples(x, group_var == grps[i])
core_m <- core_members(xc,
detection = abund.thres,
prevalence = prev.thres)
list_core[[i+1]] <- core_m
#print(list_core)
}
list_core <- list_core[-1]
list_core <- setNames(list_core, grps)
#list_core
return(list_core)
}
for_venn <- shared_core(p0.rel, group= "DiseaseState", group.colors=NULL)
unique(sample_data(p0.rel)$group_var)
unique(sample_data(p0.rel)$DiseaseState)
unique(sample_data(p0.rel)$DiseaseState)[1]
library(microbiomeutilities)
data("zackular2014")
p0 <- zackular2014
p0.rel <- microbiome::transform(p0, "compositional")
p0.gen <- aggregate_taxa(p0,"Genus")
cut.off <- 0.00001
m_abund = apply(abundances(reab), MARGIN = 1, FUN = median)
reab <- microbiome::transform(p0.gen, "compositional")
m_abund = apply(abundances(reab), MARGIN = 1, FUN = median)
abundant_otus = abundances(reab)[m_abund >= cut.off, ]
nrow(abundant_otus)
#nrow(abundant_otus)
spearman_matrix = cor(t(abundant_otus), method = "spearman")
library(factoextra)
set.seed(123)
p <- fviz_nbclust(as.data.frame(spearman_matrix),
kmeans, nstart = 25,
method = "gap_stat",
nboot = 50) +
labs(subtitle = "Gap statistic method")
p
p$data
p$mapping
p$labels
p$coordinates
p$layers
p$layers[[4]]
p$data
?fviz_nbclust
p$data$clusters
gsP.Z <- clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
pam1 <- function(x,k) list(cluster = pam(x,k, cluster.only=TRUE))
pam1
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
pam1 <- function(x,k) list(cluster = cluster::pam(x,k, cluster.only=TRUE))
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
pam1 <- function(x,k) list(cluster = cluster::pam(x,k, cluster.only=TRUE))
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
gsP.Z$Tab
gsP.Z$FUNcluster()
gsP.Z$n
gsP.Z
gsP.Z[1]
gsP.Z$B
class(gsP.Z)
clusGap(gsP.Z)
cluster::clusGap(gsP.Z)
print(gsP.Z)
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="Tibs2001SEmax")
library(cluster)
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="Tibs2001SEmax")
k
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstSEmax")
k
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstmax")
k
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstSEmax")
k
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="globalSEmax")
k
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstSEmax")
k
subsample = sample(c(1:300), size = 220, replace = F)
train_data = abundant_otus[,subsample]
test_data = abundant_otus[,-subsample]
train_spearman = cor(t(train_data), method = "spearman")
test_spearman = cor(t(test_data), method = "spearman")
vegan::mantel(as.dist(train_spearman), as.dist(test_spearman), permutations=999)
subsample = sample(c(1:12), size = 40, replace = F)
subsample = sample(c(1:12), size = 40, replace = T)
subsample
train_data = abundant_otus[,subsample]
test_data = abundant_otus[,-subsample]
train_spearman = cor(t(train_data), method = "spearman")
test_spearman = cor(t(test_data), method = "spearman")
vegan::mantel(as.dist(train_spearman), as.dist(test_spearman), permutations=999)
subsample = sample(c(1:63), size = 40, replace = T)
train_data = abundant_otus[,subsample]
test_data = abundant_otus[,-subsample]
train_spearman = cor(t(train_data), method = "spearman")
test_spearman = cor(t(test_data), method = "spearman")
vegan::mantel(as.dist(train_spearman), as.dist(test_spearman), permutations=999)
head(abundant_otus)
subsample = sample(c(1:ncol(abundant_otus)), size = 40, replace = T)
train_data = abundant_otus[,subsample]
test_data = abundant_otus[,-subsample]
train_spearman = cor(t(train_data), method = "spearman")
test_spearman = cor(t(test_data), method = "spearman")
vegan::mantel(as.dist(train_spearman), as.dist(test_spearman), permutations=999)
ncol(abundant_otus)
subsample = sample(c(1:ncol(abundant_otus)), size = 60, replace = T)
train_data = abundant_otus[,subsample]
test_data = abundant_otus[,-subsample]
train_spearman = cor(t(train_data), method = "spearman")
test_spearman = cor(t(test_data), method = "spearman")
vegan::mantel(as.dist(train_spearman), as.dist(test_spearman), permutations=999)
m_abund = apply(abundances(reab), MARGIN = 1, FUN = median)
abundant_otus = abundances(reab)[m_abund >= cut.off, ]
#nrow(abundant_otus)
spearman_matrix = cor(t(abundant_otus), method = "spearman")
library(factoextra)
set.seed(123)
p <- fviz_nbclust(as.data.frame(spearman_matrix),
kmeans, nstart = 25,
method = "gap_stat",
nboot = 50) +
labs(subtitle = "Gap statistic method")
library(cluster)
pam1 <- function(x,k) list(cluster = cluster::pam(x,k, cluster.only=TRUE))
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstSEmax")
k
subsample = sample(c(1:ncol(abundant_otus)), size = 60, replace = T)
train_data = abundant_otus[,subsample]
test_data = abundant_otus[,-subsample]
train_spearman = cor(t(train_data), method = "spearman")
test_spearman = cor(t(test_data), method = "spearman")
vegan::mantel(as.dist(train_spearman), as.dist(test_spearman), permutations=999)
p0.gen <- format_to_besthit(p0.rel)
cut.off <- 0.001
reab <- microbiome::transform(p0.gen, "compositional")
if (ab.method=="median"){
m_abund = apply(abundances(reab), MARGIN = 1, FUN = median)
} else if (ab.method=="mean"){
m_abund = apply(abundances(reab), MARGIN = 1, FUN = mean)
}
abundant_otus = abundances(reab)[m_abund >= cut.off, ]
m_abund = apply(abundances(reab), MARGIN = 1, FUN = median)
abundant_otus = abundances(reab)[m_abund >= cut.off, ]
#nrow(abundant_otus)
spearman_matrix = cor(t(abundant_otus), method = "spearman")
library(factoextra)
set.seed(123)
library(cluster)
pam1 <- function(x,k) list(cluster = cluster::pam(x,k, cluster.only=TRUE))
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstSEmax")
k
nrow(abundant_otus)
m_abund = apply(abundances(reab), MARGIN = 1, FUN = mean)
abundant_otus = abundances(reab)[m_abund >= cut.off, ]
#nrow(abundant_otus)
spearman_matrix = cor(t(abundant_otus), method = "spearman")
library(factoextra)
set.seed(123)
pam1 <- function(x,k) list(cluster = cluster::pam(x,k, cluster.only=TRUE))
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstSEmax")
k
p0.rel
p0.rel
p0.gen <- tax_glom(p0.rel, "Genus")
cut.off <- 0.001
reab <- microbiome::transform(p0.gen, "compositional")
if (ab.method=="median"){
m_abund = apply(abundances(reab), MARGIN = 1, FUN = median)
} else if (ab.method=="mean"){
m_abund = apply(abundances(reab), MARGIN = 1, FUN = mean)
}
abundant_otus = abundances(reab)[m_abund >= cut.off, ]
m_abund = apply(abundances(reab), MARGIN = 1, FUN = median)
abundant_otus = abundances(reab)[m_abund >= cut.off, ]
nrow(abundant_otus)
#nrow(abundant_otus)
spearman_matrix = cor(t(abundant_otus), method = "spearman")
pam1 <- function(x,k) list(cluster = cluster::pam(x,k, cluster.only=TRUE))
gsP.Z <- cluster::clusGap(as.data.frame(spearman_matrix), FUN = pam1, K.max = 8, B = 200)
k <- maxSE(gsP.Z$Tab[, "gap"], gsP.Z$Tab[, "SE.sim"], method="firstSEmax")
k
subsample = sample(c(1:ncol(abundant_otus)), size = 60, replace = T)
train_data = abundant_otus[,subsample]
test_data = abundant_otus[,-subsample]
train_spearman = cor(t(train_data), method = "spearman")
test_spearman = cor(t(test_data), method = "spearman")
vegan::mantel(as.dist(train_spearman), as.dist(test_spearman), permutations=999)
CAG_n5 = factor(cutree(tree = spearman_tree, k = k))
spearman_tree = hclust(dist(spearman_matrix), method = "ward")
CAG_n5 = factor(cutree(tree = spearman_tree, k = k))
CAG_n5
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(microbiomeutilities)
data("zackular2014")
p0 <- zackular2014
length(which(abundances(p0) ==
0)) / length(abundances(p0)))
length(which(abundances(p0)) ==
0)) / length(abundances(p0))
length(which(abundances(p0) ==
0)) / length(abundances(p0))
length(abundances(p0)
length(abundances(p0))
length(abundances(p0))
which(abundances(p0) ==
0)
length(taxa_sums(p0)[taxa_sums(p0) <= 1]
length(taxa_sums(p0)[taxa_sums(p0) <= 1])
length(taxa_sums(p0)[taxa_sums(p0) <= 1])
taxa_sums(p0)
sort(taxa_sums(p0))[1:10]
